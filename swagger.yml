openapi: 3.0.1
info:
  title: API Gateway service API endpoints
  description: API Gateway from Message in a Bottle with Microservices
  version: "0.1"
servers:
- url: /

paths:
  /:
    get:
      tags: [ Home ]
      summary: Return the home page of the logged user
      responses:
        200:
          description: Renders the index.html template if the user is logged.
        302: 
          description: Redirects to the login page if user isn't logged

  /login:
    get:
      tags: [ Authentication ]
      summary: Shows the login page and its form
      responses:
        200:
          description: Renders the login.html template if the user is not logged, otherwise it renders index.html.
    post:
      tags: [ Authentication ]
      summary: Handles the login of the user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: example@example.com
                password:
                  type: string
                  example: '12345'
              required:
                - email
                - password
      responses:
        200:
          description: Reloads the login.html page with a warning, in case the user credentials were invalid.
        302:
          description: Redirects to the correct profile page if the user is logged.

  /profile:
    get:
      tags: [ Profile ]
      summary: Shows the profile page of the logged customer
      responses:
        200:
          description: Renders the profile template if the user is logged filled with the user's infos. Otherwise he is redirect to login page
        302: 
          description: Redirects to the login page if user isn't logged
    
    post:
      summary: Updates the fields for the logged customer
      tags:  [ Profile ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: the email field for the user
                  example: example@example.com
                password:
                  type: string
                  description: the password field for the user
                  example: '12345'
                firstname: 
                  type: string
                  description: the firstname field for the user
                  example: Mario
                lastname: 
                  type: string
                  description: the lastname field for the user
                  example: Rossi
                birthdate:
                  type: string
                  description: the birthday field for the user
                  example: 12/12/1996
                badwords:
                  type: string
                  description: the badwords field for the user
                  example: devil, evil
                blacklist:
                  type: string
                  description: the blacklist field for the user
                  example: example1@example1.com
              required:
                - password
                - firstname
                - lastname
                - birthday
      responses:
        200:
          description: Renders the profile.html template with the updated infos
        302: 
          description: Redirects to the login page if user isn't logged

          
  /logout:
    get:
      tags: [ Authentication ]
      summary: Logs out the logged user
      responses:
        302:
          description: Redirects to the login page if the user is logged
        200: 
          description: Render login.html template if the user isn't logged
          
  /register:
    get:
      tags: [ User ]
      summary: This method allows to retrieve the sign up page for a new user
      responses:
        200:
          description: Renders the register template filled with the fields for the user's data
        302: 
          description: Redirects to the user home page if user is logged
    post:
      summary: Add a new customer
      tags: [ User ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: the email field for the user
                  example: example@example.com
                password:
                  type: string
                  description: the password field for the user
                  example: '1234'
                firstname: 
                  type: string
                  description: the firstname field for the user
                  example: Mario
                lastname: 
                  type: string
                  description: the lastname field for the user
                  example: Rossi
                birthdate:
                  type: string
                  description: the birthday field for the user
                  example: 12/12/1996
                badwords:
                  type: string
                  description: the badwords field for the user
                  example: devil, evil
              required:
                - email
                - password
                - firstname
                - lastname
                - birthday
      responses:
        200:
          description: Reloads the register.html page with a warning, in case the user credentials were invalid. Otherwise it informs user of correct registration.

  
  /delete:
    get:
      summary: Deletes the logged user
      tags: [ User ]
      responses:
        200:
          description: User deleted using his id, then it renders delete.html template
        302: 
          description: Redirects to the login page if user isn't logged
          
  /users:
    get: 
      summary: List all registered user to the logged user
      tags: [ Users ]
      responses:
        200:
          description: Renders users.html template that shows all registered users to the service
        302: 
          description: Redirects to the login page if user isn't logged
          
                    
  /users/report/{email}:
    get: 
      summary: Report a user
      tags: [ Users ]
      parameters:
      - name: email
        in: path
        description: Customer's unique email
        required: true
        schema:
          type: string
      responses:
        200:
          description: Renders report.html template that shows the form to report the user indetified by its email
        302: 
          description: Redirects to the login page if user isn't logged
    post:
      summary: Report a user
      tags: [ Users ]
      parameters:
      - name: email
        in: path
        description: Customer's unique email
        required: true
        schema:
          type: string
      responses:
        200:
          description: Renders report.html template that informs the logged user of inserting an invalid email
        302: 
          description: Report the user, and redirects to the home page if the user is logged othwerwise redirects to the login page

  /message:
    get:
      tags: [ Message ]
      summary: Return the html page containing the form to create a message with the logged user as sender
      responses:
        200:
          description: Renders the message.html template if the user is logged.
        302: 
          description: Redirects to the login page if user isn't logged
    post:
      summary: Return the html page containing the filled form of the message created
      tags: [ Message ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageFields'
      responses:
        200:
          description: Reloads the message.html page with a warning, in case the message fields were invalid. Otherwise it informs user of correct creation.
  
  /message/{receiver_email}:
    get:
      tags: [ Message ]
      summary: Return the html page containing the form to create a message with the logged user as sender and with receiver_email as destination
      responses:
        200:
          description: Renders the message.html template if the user is logged.
        302: 
          description: Redirects to the login page if user isn't logged
    post:
      summary: Return the html page containing the filled form of the message created
      tags: [ Message ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageFields'
      responses:
        200:
          description: Reloads the message.html page with a warning, in case the message fields were invalid. Otherwise it informs user of correct creation.  

  /mailbox:
    get:
      tags: [ Mailbox ]
      summary: Return the html page containing the mailbox of the logged user
      responses:
        200:
          description: Renders the mailbox.html template if the user is logged.
        302: 
          description: Redirects to the login page if user isn't logged

  /mailbox/draft:
    get:
      tags: [ Mailbox ]
      summary: Return the html page containing the draft messages of the logged user
      responses:
        200:
          description: Renders the messages_list_.html template if the user is logged.
        302: 
          description: Redirects to the login page if user isn't logged
  /mailbox/draft/{message_id}:
    get:
      tags: [ Mailbox ]
      summary: Return the html page containing the draft message with id = message_id of the logged user
      responses:
        200:
          description: Renders the message.html template containing the message with id = message_id if the user is logged.
        302: 
          description: Redirects to the login page if user isn't logged
  /mailbox/inbox:
    get:
      tags: [ Mailbox ]
      summary: Return the html page containing the inbox messages of the logged user
      responses:
        200:
          description: Renders the messages_list_.html template if the user is logged.
        302: 
          description: Redirects to the login page if user isn't logged
  /mailbox/inbox/{message_id}:
    get:
      tags: [ Mailbox ]
      summary: Return the html page containing the inbox message with id = message_id of the logged user
      responses:
        200:
          description: Renders the message.html template containing the message with id = message_id if the user is logged.
        302: 
          description: Redirects to the login page if user isn't logged  
  /mailbox/sent:
    get:
      tags: [ Mailbox ]
      summary: Return the html page containing the sent messages of the logged user
      responses:
        200:
          description: Renders the messages_list_.html template if the user is logged.
        302: 
          description: Redirects to the login page if user isn't logged
  /mailbox/sent/{message_id}:
    get:
      tags: [ Mailbox ]
      summary: Return the html page containing the sent message with id = message_id of the logged user
      responses:
        200:
          description: Renders the message.html template containing the message with id = message_id if the user is logged.
        302: 
          description: Redirects to the login page if user isn't logged
  /mailbox/scheduled:
    get:
      tags: [ Mailbox ]
      summary: Return the html page containing the scheduled messages of the logged user
      responses:
        200:
          description: Renders the messages_list_.html template if the user is logged.
        302: 
          description: Redirects to the login page if user isn't logged
  /mailbox/scheduled/{message_id}:
    get:
      tags: [ Mailbox ]
      summary: Return the html page containing the scheduled message with id = message_id of the logged user
      responses:
        200:
          description: Renders the message.html template containing the message with id = message_id if the user is logged.
        302: 
          description: Redirects to the login page if user isn't logged
  /mailbox/forward/{message_id}:
    get:
      tags: [ Message ]
      summary: Return the html page containing the message with id = message_id ready to be forwarded
      responses:
        200:
          description: Renders the message.html template containing the message with id = message_id if the user is logged.
        302: 
          description: Redirects to the login page if user isn't logged
    post:
      tags: [ Message ]
      summary: Handles the forward of the message with id = message_id of the logged user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
              required:
                - email
      responses:
        200:
          description: Reloads the message.html page with a warning, in case the receiver email(s) fields were invalid. Otherwise it informs user of correct forward. 

  /mailbox/reply/{message_id}:
    get:
      tags: [ Message ]
      summary: Return the html page containing the form's receiver body already filled with the sender of message with id = message_id
      responses:
        200:
          description: Renders the message.html template containing the message form to be filled for reply if the user is logged.
        302: 
          description: Redirects to the login page if user isn't logged
    post:
      tags: [ Message ]
      summary: Handles the reply of the message with id = message_id of the logged user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageFields'
      responses:
        200:
          description: Reloads the message.html page with a warning, in case the receiver email(s) fields were invalid. Otherwise it informs user of correct reply. 

components:
  schemas:
    MessageFields:
      required:
        - sender
        - receiver
        - body
        - date
        - time
      type: "object"
      properties:
        sender: 
          type: string
          description: email of sender
          example: example@example.com
        receiver:
          type: string
          description: email of receiver
          example: example1@example1.com
        body:
          type: string
          description: The body of the message
          example: hi, how are you?
        photo:
          type: string
          description: The photo encoded as a string
          example: base64encoded
        date:
          type: string
          description: The date of the message
          example: 12/12/2021
        time:
          type: string
          description: The time of the message
          example: 12:12
        draft:
          type: boolean
          description: Flag indicating if the message is draft 
          example: True
        scheduled:
          type: boolean
          description: Flag indicating if the message is scheduled 
          example: False